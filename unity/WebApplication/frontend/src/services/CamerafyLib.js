/** Camerafy - Copy right. All rights reserved. */
/** AUTOGENERATED CODE. DO NOT TOUCH. */
/** 18/05/2020 4:23:12 PM */

import PeerConnectionProxy from './PeerConnectionProxy';
import EventBus, { SessionDataReceivedEvent } from './EventBus';

function guid()
{
	return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));
}

function EncodeString(str, buffer, index, writeSize = true)
{
	if(!writeSize)
		return (new TextEncoder('UTF-8').encodeInto(str, new Uint8Array(buffer, index))).written;

	const result = new TextEncoder('UTF-8').encodeInto(str, new Uint8Array(buffer, index + 4));
	const tmp = new DataView(buffer, index);
	tmp.setUint32(0, result.written, true);
	return result.written + 4;
}

function DecodeString(InUint8Arr, index, length)
{
	return new TextDecoder('UTF-8').decode(new Uint8Array(InUint8Arr.buffer, index, length));
}

function GetArrayOfStringByteCount(InStringArray)
{
	var Count = 0;
	var n;
	for(n = 0; n < InStringArray.length; n++)
	{
		Count += InStringArray[n].length;
	}
	return Count;
}


class CamerafyLib
{
	constructor()
	{
		const _this = this;
		this.PendingRequests = new Map();
		EventBus.$on(SessionDataReceivedEvent, OnSessionDataReceived);
		function OnMessageResponse(InMessageId, InReturnJson)
		{
			const PromiseResolve = _this.PendingRequests.get(InMessageId);
			if(PromiseResolve === undefined)
			{
				console.error("Received response for unknown request.");
				return;
			}
			_this.PendingRequests.delete(InMessageId);
			PromiseResolve(JSON.parse(InReturnJson));
		}
		function OnSessionDataReceived(InUint8Arr)
		{
			var name = DecodeString(InUint8Arr, 0, 32);

			if(name == "00000000000000000000000000000000")
			{
				var data = new DataView(InUint8Arr.buffer);
				var offset = 32;
				var len = 0;
				len = data.getInt32(offset, true); offset += 4;
				const MessageId = DecodeString(InUint8Arr, offset, len); offset += len;
				len = data.getInt32(offset, true); offset += 4;
				const ReturnJson = DecodeString(InUint8Arr, offset, len);
				OnMessageResponse(MessageId, ReturnJson);
				return;
			}

			var args = eval(`__${name}`)(InUint8Arr);
			EventBus.$emit.apply(EventBus, [name].concat(args));

			/* Server side events argument parser */
			function __7a98bb606d933cc05bafb4812fc95c0f(InUint8Arr)
			{
				var Args = [];
				return Args;
			}
			
			function __665f90d8fc016dab152813b79f6ccf37(InUint8Arr)
			{
				var Args = [];
				return Args;
			}
			
			function __54efa4d8a26ac28fcb8fd6e1b0ae5128(InUint8Arr)
			{
				var Args = [];
				var data = new DataView(InUint8Arr.buffer);
				var offset = 32; // skip first bytes, as they hold the method address
				var n = 0;
				var N = 1;
				var len = 0;
			
				/* sdp */
				var arg0 = [];
				len = data.getInt32(offset, true); offset += 4;
				arg0 = DecodeString(InUint8Arr, offset, len); offset += len;
				Args.push(arg0);
			
				return Args;
			}
			
			function __c914ec502d666eba9669f88b293e61b7(InUint8Arr)
			{
				var Args = [];
				var data = new DataView(InUint8Arr.buffer);
				var offset = 32; // skip first bytes, as they hold the method address
				var n = 0;
				var N = 1;
				var len = 0;
			
				/* SnapshotId */
				var arg0 = [];
				arg0 = data.getInt32(offset, true); offset += 4;
				Args.push(arg0);
			
				return Args;
			}
			
			function __f2cefd1ff00b4267ff15df2a7fde054d(InUint8Arr)
			{
				var Args = [];
				var data = new DataView(InUint8Arr.buffer);
				var offset = 32; // skip first bytes, as they hold the method address
				var n = 0;
				var N = 1;
				var len = 0;
			
				/* JsonCameraData */
				var arg0 = [];
				len = data.getInt32(offset, true); offset += 4;
				arg0 = DecodeString(InUint8Arr, offset, len); offset += len;
				Args.push(arg0);
			
				return Args;
			}
			
			function __ade994924a143e2cdaa99c94d7237b59(InUint8Arr)
			{
				var Args = [];
				return Args;
			}
			
			function __f3bb377fea4c2b0036490e3484bacc6c(InUint8Arr)
			{
				var Args = [];
				var data = new DataView(InUint8Arr.buffer);
				var offset = 32; // skip first bytes, as they hold the method address
				var n = 0;
				var N = 1;
				var len = 0;
			
				/* NewEnvirionment */
				var arg0 = [];
				len = data.getInt32(offset, true); offset += 4;
				arg0 = DecodeString(InUint8Arr, offset, len); offset += len;
				Args.push(arg0);
			
				return Args;
			}
			
		}
	}


	get User()
	{
		const _this = this;
		return {
			User:
			{
				ClientRtcReady: function()
				{
					var OpCode = new ArrayBuffer(96);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("734a882f52a3c4a50b78e34ec986e14a", OpCode, offset, false);
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				NewIceCandidateReady: function(candidate, sdp_mlineindex, sdp_mid)
				{
					var OpCode = new ArrayBuffer(96 + (4 + candidate.length) + 4 + (4 + sdp_mid.length));
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("fcf565226f73bf227bb40d768746f5af", OpCode, offset, false);
				
					/* candidate */
					offset += EncodeString(candidate, OpCode, offset);
				
					/* sdp_mlineindex */
					data.setInt32(offset, sdp_mlineindex, true); offset += 4;
				
					/* sdp_mid */
					offset += EncodeString(sdp_mid, OpCode, offset);
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				ClientRtcAnswer: function(sdp)
				{
					var OpCode = new ArrayBuffer(96 + (4 + sdp.length));
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("dca947e0cfef33fe4c01d9d333901318", OpCode, offset, false);
				
					/* sdp */
					offset += EncodeString(sdp, OpCode, offset);
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				Disconnect: function()
				{
					var OpCode = new ArrayBuffer(96);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("154c06d97f7bcc2e3511b67d9534f463", OpCode, offset, false);
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				RequestCameraSnapshot: function(width, height, format)
				{
					var OpCode = new ArrayBuffer(96 + 4 + 4 + (4 + format.length));
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("5527f595e783a6d3ed2b9102a274d64a", OpCode, offset, false);
				
					/* width */
					data.setInt32(offset, width, true); offset += 4;
				
					/* height */
					data.setInt32(offset, height, true); offset += 4;
				
					/* format */
					offset += EncodeString(format, OpCode, offset);
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				GetEnvironmentInfo: function()
				{
					var OpCode = new ArrayBuffer(96);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("63ccf80e1f16e0b8bfe676e738965fb8", OpCode, offset, false);
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

			},

		}
	}

	get Input()
	{
		const _this = this;
		return {
			RemoteInputModule:
			{
				ProcessRemoteKeyboardInput: function(IsKeyDown, IsRepeat, KeyCode, Char)
				{
					var OpCode = new ArrayBuffer(96 + 1 + 1 + 1 + 2);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("9fd75e9e59f69c333db196a69e511da7", OpCode, offset, false);
				
					/* IsKeyDown */
					data.setInt8(offset, IsKeyDown); offset += 1;
				
					/* IsRepeat */
					data.setInt8(offset, IsRepeat); offset += 1;
				
					/* KeyCode */
					data.setInt8(offset, KeyCode); offset += 1;
				
					/* Char */
					data.setInt16(offset, Char, true); offset += 2;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				ProcessRemoteMouseInput: function(Xpos, Ypos, Button)
				{
					var OpCode = new ArrayBuffer(96 + 2 + 2 + 1);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("4852d5f18ccf0539751d6e89db91c2da", OpCode, offset, false);
				
					/* Xpos */
					data.setInt16(offset, Xpos, true); offset += 2;
				
					/* Ypos */
					data.setInt16(offset, Ypos, true); offset += 2;
				
					/* Button */
					data.setInt8(offset, Button); offset += 1;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				ProcessRemoteMouseWheelInput: function(ScrollX, ScrollY)
				{
					var OpCode = new ArrayBuffer(96 + 4 + 4);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("1cd4fb4231b1314ce46fed8c8fa89c38", OpCode, offset, false);
				
					/* ScrollX */
					data.setFloat32(offset, ScrollX, true); offset += 4;
				
					/* ScrollY */
					data.setFloat32(offset, ScrollY, true); offset += 4;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				ProcessRemoteTouchInput: function(NumTouches, TouchId, Phase, XPos, YPos, Force)
				{
					var OpCode = new ArrayBuffer(96 + 4 + 	(4 + (TouchId.length * 4)) + 	(4 + Phase.length) + 	(4 + (XPos.length * 2)) + 	(4 + (YPos.length * 2)) + 	(4 + (Force.length * 4)));
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("81c54a832bc54c96e3801a4988390fe6", OpCode, offset, false);
				
					/* NumTouches */
					data.setInt32(offset, NumTouches, true); offset += 4;
				
					/* TouchId */
					N = TouchId.length; data.setUint32(offset, N, true); offset += 4;
					for(n = 0; n < N; n++)
					{
						data.setInt32(offset, TouchId[n], true); offset += 4;
					}
				
					/* Phase */
					N = Phase.length; data.setUint32(offset, N, true); offset += 4;
					for(n = 0; n < N; n++)
					{
						data.setInt8(offset, Phase[n]); offset += 1;
					}
				
					/* XPos */
					N = XPos.length; data.setUint32(offset, N, true); offset += 4;
					for(n = 0; n < N; n++)
					{
						data.setInt16(offset, XPos[n], true); offset += 2;
					}
				
					/* YPos */
					N = YPos.length; data.setUint32(offset, N, true); offset += 4;
					for(n = 0; n < N; n++)
					{
						data.setInt16(offset, YPos[n], true); offset += 2;
					}
				
					/* Force */
					N = Force.length; data.setUint32(offset, N, true); offset += 4;
					for(n = 0; n < N; n++)
					{
						data.setFloat32(offset, Force[n], true); offset += 4;
					}
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

			},

		}
	}

	get Camera()
	{
		const _this = this;
		return {
			CameraController:
			{
				SetMaxLinearSpeed: function(InMaxLinearSpeed)
				{
					var OpCode = new ArrayBuffer(96 + 4);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("026557a832401d261de1976574ede7b8", OpCode, offset, false);
				
					/* InMaxLinearSpeed */
					data.setFloat32(offset, InMaxLinearSpeed, true); offset += 4;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				SetMaxAngularSpeed: function(InMaxAngularSpeed)
				{
					var OpCode = new ArrayBuffer(96 + 4);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("5b815722e2abd45ecb150985ac3d2c71", OpCode, offset, false);
				
					/* InMaxAngularSpeed */
					data.setFloat32(offset, InMaxAngularSpeed, true); offset += 4;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				SetInvertControls: function(InState)
				{
					var OpCode = new ArrayBuffer(96 + 1);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("9e91fb0bcab699c09a0fb38559f940ef", OpCode, offset, false);
				
					/* InState */
					data.setInt8(offset, InState); offset += 1;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				SetLinearDamping: function(InDamping)
				{
					var OpCode = new ArrayBuffer(96 + 4);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("04e6e0b3e93be80c10852866d545edd4", OpCode, offset, false);
				
					/* InDamping */
					data.setFloat32(offset, InDamping, true); offset += 4;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				SetAngularDamping: function(InDamping)
				{
					var OpCode = new ArrayBuffer(96 + 4);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("ae310fa100ec938961ae9e9cfff40507", OpCode, offset, false);
				
					/* InDamping */
					data.setFloat32(offset, InDamping, true); offset += 4;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				SetCameraTarget: function(InX, InY, InZ)
				{
					var OpCode = new ArrayBuffer(96 + 4 + 4 + 4);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("6b8a57c4876b8f590d0af2f369508b19", OpCode, offset, false);
				
					/* InX */
					data.setFloat32(offset, InX, true); offset += 4;
				
					/* InY */
					data.setFloat32(offset, InY, true); offset += 4;
				
					/* InZ */
					data.setFloat32(offset, InZ, true); offset += 4;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				SetCameraTargetByName: function(InTargetName)
				{
					var OpCode = new ArrayBuffer(96 + (4 + InTargetName.length));
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("cb818532b951838613febc492731319a", OpCode, offset, false);
				
					/* InTargetName */
					offset += EncodeString(InTargetName, OpCode, offset);
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				SetFreeBehaviour: function(Weight)
				{
					var OpCode = new ArrayBuffer(96 + 4);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("65ab0ede9d770a07f696887365ea8d3f", OpCode, offset, false);
				
					/* Weight */
					data.setFloat32(offset, Weight, true); offset += 4;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				SetOrbitBehaviour: function(Weight)
				{
					var OpCode = new ArrayBuffer(96 + 4);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.UserSessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("109f8afb1a192f46a42139c3b22c7666", OpCode, offset, false);
				
					/* Weight */
					data.setFloat32(offset, Weight, true); offset += 4;
				
				
					PeerConnectionProxy.send(OpCode, false);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

			},

		}
	}

	get Application()
	{
		const _this = this;
		return {
			Session:
			{
				Connect: function(InUserLoginData)
				{
					var OpCode = new ArrayBuffer(96 + (4 + InUserLoginData.length));
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.SessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("c2304902e2fc705875403e341ee86306", OpCode, offset, false);
				
					/* InUserLoginData */
					offset += EncodeString(InUserLoginData, OpCode, offset);
				
				
					PeerConnectionProxy.send(OpCode, true);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				ChangeEnvironment: function(InEnvironmentDescJson)
				{
					var OpCode = new ArrayBuffer(96 + (4 + InEnvironmentDescJson.length));
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.SessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("4a4e6dda9dd3282ac568f8bd0dba4964", OpCode, offset, false);
				
					/* InEnvironmentDescJson */
					offset += EncodeString(InEnvironmentDescJson, OpCode, offset);
				
				
					PeerConnectionProxy.send(OpCode, true);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				ChangeEnvironmentSocket: function(InSocketName, InModelJsonDesc)
				{
					var OpCode = new ArrayBuffer(96 + (4 + InSocketName.length) + (4 + InModelJsonDesc.length));
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.SessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("0d60d46d9a6eaf3ab7071e428bd6f2d6", OpCode, offset, false);
				
					/* InSocketName */
					offset += EncodeString(InSocketName, OpCode, offset);
				
					/* InModelJsonDesc */
					offset += EncodeString(InModelJsonDesc, OpCode, offset);
				
				
					PeerConnectionProxy.send(OpCode, true);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

				GetEnvironmentSockets: function()
				{
					var OpCode = new ArrayBuffer(96);
					var data = new DataView(OpCode);
					var offset = 0;
					var n = 0;
					var N = 1;
					var len = 0;
					const messageId = guid();
				
					offset += EncodeString(PeerConnectionProxy.SessionId, OpCode, offset, false);
					offset += EncodeString(messageId, OpCode, offset, false);
					offset += EncodeString("97146f433ae588ccd631d240c0dce3ec", OpCode, offset, false);
				
				
					PeerConnectionProxy.send(OpCode, true);
					return new Promise(function(resolve) { _this.PendingRequests.set(messageId, resolve); });
				},

			},

		}
	}

}

/* Server side events */
export const TimeoutServerEvent = "7a98bb606d933cc05bafb4812fc95c0f";
export const ServerRtcClientReadyServerEvent = "665f90d8fc016dab152813b79f6ccf37";
export const ServerRtcOfferServerEvent = "54efa4d8a26ac28fcb8fd6e1b0ae5128";
export const NewSnapshotAvailableServerEvent = "c914ec502d666eba9669f88b293e61b7";
export const InitialCameraValuesServerEvent = "f2cefd1ff00b4267ff15df2a7fde054d";
export const SessionTerminateServerEvent = "ade994924a143e2cdaa99c94d7237b59";
export const EnvironmentChangedServerEvent = "f3bb377fea4c2b0036490e3484bacc6c";

export default new CamerafyLib();
